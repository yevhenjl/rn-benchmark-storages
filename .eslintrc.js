module.exports = {
  root: true,
  env: {
    browser: true,
    es6: true,
    node: true,
    jest: true,
    'react-native/react-native': true,
  },
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:prettier/recommended',
    'plugin:react-hooks/recommended',
  ],
  parser: '@typescript-eslint/parser',
  parserOptions: {
    ecmaVersion: 'latest',
    sourceType: 'module',
  },
  ignorePatterns: ['.eslintrc.js', 'android', 'ios', 'node_modules', 'coverage', 'build'],
  plugins: ['react', 'react-native', '@typescript-eslint', 'import', 'unused-imports'],
  rules: {
    'consistent-return': 'warn',
    'default-param-last': 'off',
    'no-undef': 'error',
    'no-use-before-define': 'off',
    'no-prototype-builtins': 'warn',
    'no-bitwise': 'warn',
    'default-case': 'warn',
    'require-yield': 'warn',
    'guard-for-in': 'warn',
    'import/named': 'off',
    'import/no-unresolved': 'off',
    'import/no-extraneous-dependencies': [
      'warn',
      {
        optionalDependencies: false,
        peerDependencies: false,
      },
    ],
    'import/no-named-as-default': 'off',
    'import/no-cycle': 'off',
    'import/prefer-default-export': 'off',
    'prefer-const': 'warn',
    'ban-ts-ignore': 'off',
    '@typescript-eslint/explicit-module-boundary-types': 'off',
    '@typescript-eslint/explicit-function-return-type': 'off',
    '@typescript-eslint/naming-convention': [
      'error',
      {
        selector: 'variable',
        format: ['camelCase', 'PascalCase', 'UPPER_CASE'],
        leadingUnderscore: 'forbid',
        trailingUnderscore: 'forbid',
      },
      {
        selector: 'function',
        format: ['camelCase', 'PascalCase'],
        leadingUnderscore: 'forbid',
        trailingUnderscore: 'forbid',
      },
      {
        selector: 'typeLike',
        format: ['PascalCase'],
        leadingUnderscore: 'forbid',
        trailingUnderscore: 'forbid',
      },
      {
        selector: 'property',
        format: ['camelCase', 'PascalCase', 'snake_case', 'UPPER_CASE'],
        filter: {regex: '\\d+|\\w+-\\w+', match: false},
        leadingUnderscore: 'allowSingleOrDouble',
        trailingUnderscore: 'forbid',
      },
      {
        selector: 'objectLiteralProperty',
        format: null,
        filter: {regex: '\\d+|\\w+-\\w+', match: true},
        leadingUnderscore: 'allowSingleOrDouble',
        trailingUnderscore: 'forbid',
      },
      {
        selector: 'default',
        format: ['camelCase', 'PascalCase', 'snake_case', 'UPPER_CASE'],
      },
    ],
    '@typescript-eslint/no-shadow': 'warn',
    '@typescript-eslint/no-use-before-define': 'off',
    '@typescript-eslint/no-unused-expressions': 'warn',
    '@typescript-eslint/no-var-requires': 'off',
    '@typescript-eslint/ban-ts-comment': 'off',
    'padding-line-between-statements': 'off',
    'no-param-reassign': 'warn',
    'no-restricted-properties': 'warn',
    'no-restricted-syntax': 'warn',
    'array-callback-return': 'warn',
    'no-plusplus': 'warn',
    radix: 'warn',
    'react/react-in-jsx-scope': 'off',
    'react/jsx-props-no-spreading': 'off',
    'react/no-unescaped-entities': 'off',
    'react/prop-types': 0,
    'react-native/no-inline-styles': 1,
    'lines-between-class-members': ['error', 'always', {exceptAfterSingleLine: true}],
    'react/jsx-filename-extension': 'off',
    'linebreak-style': 'off',
    'prettier/prettier': [
      'warn',
      {
        endOfLine: 'auto',
      },
    ],
  },
  globals: {
    Atomics: 'readonly',
    SharedArrayBuffer: 'readonly',
    route: 'readonly',
    __DEV__: 'readonly',
    it: 'readonly',
    expect: 'readonly',
    RequestInit: 'readonly',
    HeadersInit: 'readonly',
  },
  settings: {
    react: {
      version: 'detect',
    },
  },
};
